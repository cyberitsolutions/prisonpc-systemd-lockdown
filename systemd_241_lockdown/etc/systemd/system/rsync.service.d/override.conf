[Service]
# rsyncd needs network access
PrivateNetwork=no
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6
#IPAddressDeny=any
#IPAddressAllow=localhost

# We don't use User= here, because
#  * the rsync package doesn't create one by default;
#  * rsyncd needs CAP_NET_BIND to bind to the default port (873);
#  * rsyncd needs CAP_SYS_CHROOT if you "use chroot"; and
#  * rsyncd.conf can have >1 share, with *DIFFERENT* chroots and users.
#User=my-rsync-user
# We don't use PrivateUsers= here, because
#  * rsyncd.conf doesn't use "numeric ids" by default.
#PrivateUsers=yes
# These don't really help, but they don't hurt either.
RuntimeDirectory=rsync
WorkingDirectory=/run/rsync

# If you're just exporting something like /srv/rsync or /var/cache/foo,
# all of these can be protected.
PrivateDevices=yes
PrivateTmp=yes
ProtectHome=yes
ProtectControlGroups=yes
ProtectKernelModules=yes
ProtectKernelTunables=yes
ProtectSystem=strict
# This is how you'd add just the exported areas, implicitly making everything else read-only.
# NOTE: ReadOnlyPaths= is a lot harder to use, because
# you'd need to whitelist things like /etc/rsyncd.conf and /lib/blah.
#ReadWritePaths=-/srv/rsync /var/log/rsync
# Adopt a hardline (EVERYTHING is read-only) by default, because
#  * in rsyncd.conf, "read only" is on by default;
#  * in rsyncd.conf, logging is via stdio by default (not /var/log nor /dev/log); and
#  * (AFAIK) rsyncd is mostly "anonymous read-only" access, like FTP.
ReadWritePaths=

CapabilityBoundingSet=CAP_NET_BIND_SERVICE CAP_SYS_CHROOT CAP_SETUID CAP_SETGID
SystemCallArchitectures=native
RestrictNamespaces=yes
NoNewPrivileges=yes
SystemCallFilter=@system-service chroot
# SystemCallFilter=~@privileged @resources
RestrictRealtime=yes
LockPersonality=yes
# WARNING: RemoveIPC= only works if you use User=!
RemoveIPC=yes
MemoryDenyWriteExecute=yes
# I *think* this has no effect because rsyncd tends to chmod by default anyway.
# It probably changes the permissions of logfiles if you use "log file" instead of stdout/syslog.
UMask=0077
