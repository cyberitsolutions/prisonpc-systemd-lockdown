# I conceive of three user stories:
#
#   1. As long as facebook works, I don't care.
#   2. I get accurate time from my built-in GPS receiver, and I tell my LAN about it.
#   3. I get accurate time from X.pool.ntp.org, and I tell my LAN about it.
#
# For case #1, you don't need NTP.
# The basic SNTP client built into systemd (systemd-timesyncd) is sufficient.
#
# For case #2, I can't test right now, because my airgapped sites are airgapped.
# See also https://en.wikipedia.org/wiki/Pulse-per-second_signal
# Here is an untested guess based on the apparmor profile:
#   PrivateDevices=no
#   DeviceAllow=char-pps    # for 1PPS part of GPS time
#   <shared memory?>        # for GPS part of GPS time (via gpsd)
#   DeviceAllow=char-ttyS   # for pre-gpsd stuff?
# See also https://gpsd.gitlab.io/gpsd/gpsd-time-service-howto.html
# 
#
# For case #3, I have covered it below.

[Service]

# FIXME: /usr/lib/ntp/ntp-systemd-wrapper runs ntpd as root with -u
# ntpsec:ntpsec to do its own privileged dropping.  It would be better
# to do that here (User=ntpsec), right?
#
# UPDATE: based on ntpd.c:558, it looks like ntpsec flat out MUST do
# its own privilege-dropping.  This makes sense, I guess, because it
# needs things like CAP_SYS_TIME.
User=
PrivateUsers=no
CapabilityBoundingSet=CAP_SETUID CAP_SETGID
SystemCallFilter=@setuid

# ntpd needs network access, obviously!
PrivateNetwork=no
IPAddressDeny=
RestrictAddressFamilies=AF_INET AF_INET6
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
# AF_NETLINK allows it to notice iface add/remove events without polling.
RestrictAddressFamilies=AF_NETLINK

# ntpd needs permission to set the kernel's clock, obviously!
CapabilityBoundingSet=CAP_SYS_TIME
SystemCallFilter=@clock

# WARNING: ntpsec runs ntpd with -N by default, which makes it run in REAL TIME MODE.
# Therefore it is a BLOODY GOOD IDEA not to downgrade it!
# CAP_SYS_NICE and @resources both grant uprating to realtime via *_setscheduler().
# CAP_SYS_RESOURCE and @resources both grant uprating via setrlimit().
RestrictRealtime=no
SystemCallFilter=@resources
CapabilityBoundingSet=CAP_SYS_NICE CAP_SYS_RESOURCE

# Upstream writes to /run/ntpd.pid, not /run/ntpsec/ntpd.pid.
# This means we have to give write access to ALL of /run, instead of
# just RuntimeDirectory=ntpsec (i.e. /run/ntpsec).
#
# NOTE: the wrapper also needs /run/lock/ntpsec-ntpdate.
ReadWritePaths=/run
ReadWritePaths=-/var/log/ntpsec

# If I just do this HERE, maybe ntpd won't mind being unable to do so itself?
# ntpd/ntpd.c:    pmax = sched_get_priority_max(SCHED_FIFO);
# ntpd/ntpd.c:    sched.sched_priority = pmax;
# ntpd/ntpd.c:    if ( sched_setscheduler(0, SCHED_FIFO, &sched) == -1 )
# CPUSchedulingPolicy=fifo
# CPUSchedulingPriority=99

# =================
# IMPORTANT! FIXME!
# =================
# With the SystemCallFilter= whitelist above, ntpd exits during early startup, but
# does not say why.  Normally seccomp-bpf would make it core dump, so
# we would see it in "coredumpctl info".  Without that,
# I haven't been able to work out what necessary syscalls are blocked, so
# I gave up and ALLOWED THEM ALL.
#
#     ntpd[5156]: IO: Listening on routing socket on fd #22 for interface updates
#     systemd[1]: ntpsec.service: Main process exited, code=killed, status=31/SYS
#     systemd[1]: ntpsec.service: Failed with result 'signal'.
#     systemd[1]: ntpsec.service: Consumed 59ms CPU time, no IP traffic.
SystemCallFilter=
# UPDATE: we CAN at least blacklist ones "systemd-analyze security" dislikes.
# NOTE: the whitelist line just works around https://bugs.debian.org/930767
SystemCallFilter=@system-service @resources @privileged
SystemCallFilter=~@debug @module @mount @raw-io @reboot @swap @cpu-emulation @obsolete


# DEBUGGING
# Type=simple
# ExecStart=
# ExecStart=/usr/sbin/ntpd -p /run/ntpd.pid -c /etc/ntpsec/ntp.conf -g -N -u ntpsec:ntpsec -ddd
