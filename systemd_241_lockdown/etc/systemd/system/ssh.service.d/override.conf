# /join #systemd
# 19:56 <twb> If I lock down ssh.service, that doesn't affect users ssh'ing in, right?  Because they end up in a user slice, as confirmed in "systemctl status"
# 19:57 <grawity> well, the user process still starts in ssh.service
# 19:57 <grawity> it is moved to a different cgroup later, but that doesn't necessarily allow it to shake off all restrictions, e.g. seccomp
# 19:57 <grawity> only those that are actually cgroup-bound
# 19:58 <twb> does "cgroup-bound" also include ns stuff?  e.g. PrivateHome
# 19:59 <grawity> no
# 19:59 <twb> Owie
# 20:00 <grawity> that's process-specific, a privileged process can e.g. umount systemd's "privacy" overlay or outright switch back to the initial namespace via /proc, but that isn't automatic at all
# 20:01 <twb> Well, at a high level I'm asking what things from "systemd-analyze security ssh" I can put into ssh.service.d/twb.conf, without breaking user sessions that are started via ssh'ing in
# 20:01 <grawity> probably very little
# 20:02 <grawity> sshd already has decent privilege separation built in, though, so I'd say keep it as is
# 20:02 <grawity> if anything, trying to contain it too much would just break the privsep feature
# 20:03 <twb> The purpose of lockdown in the systemd unit isn't to replace lockdown in the daemon, it's defense-in-depth against bugs in the daemon
# 20:04 <twb> OpenSSH itself is pretty good, but it can still be pwned by badness in third-party PAM or NSS modules
# 20:05 <grawity> 1) don't use those, 2) PAM in particular kinda has to be privileged for many modules to do their job, doesn't it
# 20:06 <twb> OpenSSH itself advises people just to leave UsePAM off entirely.  Of course, systemd-logind doesn't like that.
# 20:07 <grawity> mostly because it's an OpenBSD thing and OpenBSD doesn't even have PAM
