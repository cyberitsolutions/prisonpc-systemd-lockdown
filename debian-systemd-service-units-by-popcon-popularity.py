#!/usr/bin/python3

# GOAL: we want to apply "systemd-analyze security" lockdown to all units.
#       We should focus on the most-used units first.
#       So print a list of units, ordered by decreasing popularity.
#
# UPDATE: actually, sort by how insecure they are, as estimated by how
#         many CVEs are filed against them.
#
# This combines data in the Packages.xz (apt-file) database and the by-inst (popcon) databases.

import gzip
import os
import sqlite3
import subprocess
import json
import glob

import debian.deb822
import requests

def binary_package_to_source_package(s: str) -> str:
    return subprocess.check_output('grep-aptavail -s Source --no-field-name --exact-match -P'.split() + [s],
                                   universal_newlines=True
    ).strip() or s


# These two commands are slow, so they're persistent between runs.
subprocess.check_call('wget -nv -nc https://popcon.debian.org/by_inst.gz'.split())
if not os.path.exists('apt-file.stdout'):
    with open('apt-file.stdout', 'w') as f:
        subprocess.check_call(
            ['apt-file', 'search', '--regexp', 'systemd/system/[^/]*\.service$'],
            stdout=f)

        # Oops!  Some packages - especially old and shit ones - don't have a native .service, but instead
        # get one autogenerated from /etc/init.d/frobozz.  Therefore check for those, too.
        # FIXME: don't bother to learn init.d files that already have a .service
        subprocess.check_call(
            # NOTE: the [^[:space:]]+ instead of .* (or nothing) is because otherwise it includes trailing whitespace.
            ['apt-file', 'search', '--regexp', 'etc/init.d/[^[:space:]]+'],
            stdout=f)


# This step is relatively fast, so we don't persist it between runs.
with sqlite3.connect(':memory:') as conn:
    #conn.row_factory = sqlite3.Row
    conn.execute('PRAGMA wal_mode = journal')
    ## One or more units aren't known to popcon, but I can't be arsed finding out which it is.
    ## UPDATE: by doing a "LEFT JOIN" instead of a "JOIN", they'll show up with a rank of "None" (NULL).
    #conn.execute('PRAGMA foreign_keys = 1')
    conn.execute('CREATE TABLE CVEs (source_package TEXT PRIMARY KEY, rank INTEGER NOT NULL)')
    conn.execute('CREATE TABLE popcon (package TEXT PRIMARY KEY, rank INTEGER NOT NULL)')
    conn.execute('CREATE TABLE units (package TEXT NOT NULL REFERENCES popcon, unit_path TEXT NOT NULL)')

    with gzip.open('by_inst.gz', 'rt') as f:
        conn.executemany(
            'INSERT INTO popcon VALUES (?, ?)',
            ((words[1], words[0])
             for line in f
             for words in [line.split()]
             if words[0].isdigit()))

    with open('apt-file.stdout') as f:
        conn.executemany(
            'INSERT INTO units VALUES (?, ?)',
            (((package, unit_path)
              for line in f
              for package, _, unit_path in [line.strip().partition(': ')])))

    ## This does one query per source package, which is WAY too slow.
    # conn.executemany(
    #     'INSERT INTO CVEs (package, rank) VALUES (?, ?)',
    #     ((binary_package, resp.text.count('CVE'))
    #      for binary_package, in conn.execute(
    #              # 'SELECT DISTINCT package FROM units'
    #              'SELECT DISTINCT package FROM units NATURAL LEFT JOIN popcon ORDER BY rank, package'
    #              ' LIMIT 10'  # DEBUGGING
    #      )
    #      for resp in [requests.get(
    #              'https://security-tracker.debian.org/tracker/source-package/'
    #              '{binary_package_to_source_package(binary_package)}')]
    #      if resp.ok))
    # for binary_package, in conn.execute(
    #         # 'SELECT DISTINCT package FROM units'
    #         'SELECT DISTINCT package FROM units NATURAL JOIN popcon ORDER BY rank'
    #         ' LIMIT 10'  # DEBUGGING
    # ):
    #     print(f'binary_package {binary_package}')
    #     url = (
    #         'https://security-tracker.debian.org/tracker/source-package/'
    #         f'{binary_package_to_source_package(binary_package)}')
    #     print(f'url {url}')
    #     resp = requests.get(url)
    #     if resp.ok:
    #         count = resp.text.count('CVE')
    #         print(f'count {count}')
    #         conn.execute('INSERT INTO CVEs VALUES (?, ?)', (binary_package, count))

    # Instead, download the json database and process that...
    subprocess.check_call('wget -nv -nc https://security-tracker.debian.org/tracker/data/json'.split())
    with open('json') as f:
        obj = json.load(f)
    for k in obj:
        obj[k] = len(obj[k])    # reduce CVE data to a simple count
    conn.executemany('INSERT INTO CVEs VALUES (?, ?)', obj.items())
    del obj

    conn.execute('CREATE TABLE packages (package TEXT PRIMARY KEY, source_package TEXT NOT NULL)')
    ## This is FAR too slow.
    # conn.executemany(
    #     'INSERT INTO packages (package, source_package) VALUES (?, ?)',
    #     ((package, binary_package_to_source_package(package))
    #       for package, in conn.execute('SELECT DISTINCT package FROM units')))
    for path in glob.glob('/var/lib/apt/lists/*_Packages'):
        with open(path) as f:
            # UPDATE: I give up, I can't work out how to do this in debian.deb822 or apt.Cache.
            # for package in debian.deb822.Packages(f):
            #     print(package.dump())
            #     exit()
            for line in f:
                if line.startswith('Package: '):
                    _, package = line.strip().split()
                elif line.startswith('Source: '):
                    source_package = line.split()[1]
                elif line == '\n':
                    conn.execute('INSERT OR IGNORE INTO packages VALUES (?, ?)', (package, source_package or package))
                    package = source_package = None

    with open('debian-systemd-service-units-by-popcon-popularity.tsv', 'w') as f:
        for row in conn.execute('SELECT rank, package, unit_path FROM units NATURAL LEFT JOIN popcon ORDER BY rank IS NULL, 1, 2, 3'):
            unit_name = os.path.basename(row[-1])
            if (os.path.exists(f'systemd_241_lockdown/etc/systemd/system/{unit_name}.d/20-default-deny.conf') or
                os.path.exists(f'systemd_241_lockdown/etc/systemd/system/{unit_name}.d/20-SKIPPED.conf')):
                # Mark it as "done" by commenting it out.
                row = list(row)
                row[0] = '#' + str(row[0])
            print(*row, sep='\t', file=f)

    with open('debian-systemd-service-units-by-cve-count.tsv', 'w') as f:
        for row in conn.execute('SELECT rank, package, unit_path FROM units NATURAL JOIN packages NATURAL LEFT JOIN CVEs ORDER BY 1 DESC, 2, 3'):
            unit_name = os.path.basename(row[-1])
            if (os.path.exists(f'systemd_241_lockdown/etc/systemd/system/{unit_name}.d/20-default-deny.conf') or
                os.path.exists(f'systemd_241_lockdown/etc/systemd/system/{unit_name}.d/20-SKIPPED.conf')):
                # Mark it as "done" by commenting it out.
                row = list(row)
                row[0] = '#' + str(row[0])
            print(*row, sep='\t', file=f)
