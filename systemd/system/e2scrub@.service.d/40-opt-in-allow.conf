# Problem: your server never reboots.
# After an unscheduled power outage, e2fsck says "uh oh, 400 days without a fsck, doing a fsck now".
# This can take several hours, during which time your server remains offline (i.e. high MTTR).
#
# Solution: periodically make a snapshot of your ext4 filesystem,
# fsck the SNAPSHOT (so it doesn't affect the mounted original), then
# if fsck passed back clean, mark the ORIGINAL as fscked today.
#
# Resetting that "last fsck" time (tune2fs -c0 -T$(date +%s))
# avoids the unscheduled fsck on unscheduled reboot.
#
#  * e2scrub_all enumerates the volumes and fires e2scrub@ on each volume.
#  * e2scrub@ does the heavy lifting (lvcreate, e2fsck, tune2fs).
#  * e2scrub_fail@ sends emails.


# FIXME: NOT TESTED with lvm2-lockd with SAN-backed PVs!

[Service]
User=

# FIXME: PrivateUsers=yes breaks lvcreate... why???
PrivateUsers=no

# FIXME: e2scrub_all starts this unit with a mountpoint, not a device.
#        AND YET, this unit is working with PrivateMounts=yes.  How???
#        Possibly because the libblkid cache is accessible?
#        Let's test that by setting the cache file somewhere else...
#            BindReadOnlyPaths=/etc/blkid.conf.e2scrub-test:/etc/blkid.conf
#        Hrmm, it can STILL resolve mountpoint -> LV!
#PrivateMounts=no
# lvcreate needs access to /dev/VG0/LV0 &c.
PrivateDevices=no
# This is not sufficient a sufficient whitelist:
#     DeviceAllow=block-device-mapper
#     DeviceAllow=/dev/mapper/control
# Because lvcreate --snapshot needs write access to the PVs (e.g. /dev/sda1).
# There are *A LOT* of different PVs (e.g. block-sd, block-nvme, block-zvol, block-zram).
# Therefore, allow *ALL* block devices (i.e. only confine access to char devices).
DeviceAllow=/dev/mapper/control
DeviceAllow=block-*


# Temporarily "zero out" upstream's AmbientCapabilities= so we can test if they're really needed.
# UPDATE: it seems like upstream's CAP_RAW_IO isn't actually needed, so leave it out of CapabilityBoundingSet=.
AmbientCapabilities=

# lvcreate needs CAP_SYS_ADMIN for an ioctl (not sure which one).
# lvcreate needs CAP_IPC_LOCK to call mlock(2).
# lvcreate needs CAP_SYS_NICE for setpriority(2) (to make itself less nice).
CapabilityBoundingSet=CAP_SYS_ADMIN CAP_IPC_LOCK CAP_SYS_NICE


# FIXME: why did upstream have ProtectHome=read-only instead of stronger ProtectHome=yes?

# lvcreate always calls setpriority(2) to make itself more important.
# This may fail if CapabilityBoundingSet= is confined, but
# the syscall still needs to be allowed in seccomp-bpf, or lvcreate will core dump.
SystemCallFilter=@resources

# With ProtectSystem=strict, we must explicitly grant write access to
# /etc/lvm/lvm.conf's default value of locking_dir = "/run/lock/lvm".
# We must give access to the parent dir, because the lvm dir won't
# exist in the (very unlikely) case where we're the first LVM command
# to run since boot.
ReadWritePaths=/run/lock
# We must also allow lvcreate to backup the VG state to (by default)
#   backup_dir = "/etc/lvm/backup"
#   archive_dir = "/etc/lvm/archive"
ReadWritePaths=-/etc/lvm/backup
ReadWritePaths=-/etc/lvm/archive
# CYBER SPECIFIC:
# Because those paths conflict with etckeeper, we move them.
ReadWritePaths=-/var/backups/lvm


# # DEBUGGING
# SyslogIdentifier=
# ExecStart=
# ExecStart=lvcreate --snapshot --size=256M --name e2scrub-test-lv.e2scrub VG0/e2scrub-test-lv
# ExecStart=e2fsck -pf /dev/VG0/e2scrub-test-lv.e2scrub
# ExecStart=tune2fs -C0 /dev/VG0/e2scrub-test-lv
# ExecStart=lvremove -f VG0/e2scrub-test-lv.e2scrub
